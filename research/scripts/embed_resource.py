"""
Creates a C++ resource file embedding compressed data
"""

import os
import string
import cStringIO

HDR_TEMPLATE = """// Autogenerated Resource file - DO NOT MODIFY DIRECTLY!
#pragma once
#include <map>
#include <string>
namespace res {
     std::pair<const char *, size_t> getFileContent(const std::string &filename);
}
"""

CPP_TEMPLATE = """// Autogenerated Resource file - DO NOT MODIFY DIRECTLY!
#include "EmbeddedContent.h"
namespace res {
    // const char _file_content_[] = [1,2,3];
    %s

    // colection of resource files: file name => file content
    const std::map<std::string, std::pair<const char *, size_t> > s_resourceFiles = {
        %s
    };
    std::pair<const char *, size_t> getFileContent(const std::string &filename)
    {
        return s_resourceFiles.at(filename);
    }
}
"""

LITERAL_BYTES_TEMPLATE = """
    const char %s[] = { %s };
    const size_t %s = %s;
"""

FILES = [("../libppp/share/shape_predictor_68_face_landmarks.dat", "")]
#FILES = [("../README.md", "")]

OUTPUT_SRC_FILE = '../libppp/src/EmbeddedContent.cpp'
OUTPUT_HDR_FILE = '../libppp/include/EmbeddedContent.h'

VALID_VARIABLE_CHARS = string.ascii_lowercase + string.ascii_uppercase + string.digits

TABLE = []
for ch in range(256):
    chrch = chr(ch)
    chrch = repr(chrch)
    chrch = chrch[1:-1]
    if chrch == '"':
        chrch = '\\"'
    if chrch[0:2] == '\\x':
        chrch = '\\' + format(ch, '03o')
    TABLE.append(chrch)

CPP_CONTENT = cStringIO.StringIO()
CPP_FILEMAP = cStringIO.StringIO()

for efile in FILES:
    filePath = efile[0]
    fileName = efile[1]
    print 'Processing file %s' % filePath

    chars = cStringIO.StringIO()
    if not fileName:
        fileName = os.path.basename(filePath)

    with open(filePath, 'rb') as fp:
        content = fp.read()

    const_char_var_name = '_%s_' % ''.join([ch for ch in filePath if ch in VALID_VARIABLE_CHARS])
    for byte in content:
        chars.write('%s,' % ord(byte))
    file_size = len(content)

    CPP_CONTENT.write('    const char %s[] = { %s };\n'
        % (const_char_var_name, chars.getvalue()))
    CPP_FILEMAP.write('{ std::string("%s"), std::make_pair(%s, %d) },\n'
        % (fileName, const_char_var_name, file_size))


CPP_RESOURCE_CONTENT = CPP_TEMPLATE % (CPP_CONTENT.getvalue(), CPP_FILEMAP.getvalue())
with open(OUTPUT_SRC_FILE, 'w') as fp:
    fp.write(CPP_RESOURCE_CONTENT)

with open(OUTPUT_HDR_FILE, 'w') as fp:
    fp.write(HDR_TEMPLATE)