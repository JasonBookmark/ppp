#include <iostream>

#include <fstream>

#include "CanvasDefinition.h"
#include "LandMarks.h"
#include "PhotoStandard.h"
#include "PppEngine.h"
#include <opencv2/imgcodecs.hpp>
#include <tclap/CmdLine.h>

using namespace std;

void configureEngine(const string & configFilePath, PppEngine & engine)
{
    // Read configuration file
    std::ifstream fs(configFilePath, std::ios_base::in);
    const std::string configString((std::istreambuf_iterator<char>(fs)), std::istreambuf_iterator<char>());
    if (!engine.configure(configString))
    {
        std::cerr << "Unable to load engine configuration. Exiting " << std::endl;
        std::terminate();
    }
}

std::string setImage(const string & inputImagePath, const PppEngine & engine)
{
    const auto inputImage = cv::imread(inputImagePath);
    if (!inputImage.size.dims())
    {
        std::cerr << "Unable to load image in vision engine. Exiting " << std::endl;
        std::terminate();
    }
    return engine.setInputImage(inputImage);
}

int main(int argc, char ** argv)
{
    const std::string dimensionTypeDescription = "dimension in mm | cm | inch";
    TCLAP::CmdLine cmd("Employee badge generation program", ' ', "1.0");

    // Input and output image file
    TCLAP::ValueArg<std::string> inputImage("i", "inImage", "Input photo taken by a camera", true, "", "file path");
    TCLAP::ValueArg<std::string> outputImage("o",
                                             "outImage",
                                             "Output photo generated by this program",
                                             true,
                                             "",
                                             "file path");
    cmd.add(inputImage);
    cmd.add(outputImage);

    // Configuration file (config.bundle.json) for Computer Vision engine
    TCLAP::ValueArg<std::string> configFile("",
                                            "config",
                                            "Configuration file with Computer Vision models",
                                            false,
                                            "config.bundle.json",
                                            "file path");
    cmd.add(configFile);

    // Photo standard arguments:
    TCLAP::ValueArg<double> photoWidth("", "photoWidth", "Photo standard: width", false, 2.0, dimensionTypeDescription);
    TCLAP::ValueArg<double> photoHeight("",
                                        "photoHeight",
                                        "Photo standard: height",
                                        false,
                                        2.0,
                                        dimensionTypeDescription);
    TCLAP::ValueArg<double> faceHeight("",
                                       "faceHeight",
                                       "Photo standard: distance from chin to top of the head",
                                       false,
                                       1.29,
                                       dimensionTypeDescription);
    TCLAP::ValueArg<double> bottomEyeLine("",
                                          "bottomEyeLine",
                                          "Photo standard: distance from bottom of photo to the eye line",
                                          false,
                                          1.18,
                                          dimensionTypeDescription);
    TCLAP::ValueArg<std::string> photoUnits("",
                                            "photoUnits",
                                            "Units for the photo size",
                                            false,
                                            "inch",
                                            "[mm | cm | inch]");
    cmd.add(photoWidth);
    cmd.add(photoHeight);
    cmd.add(faceHeight);
    cmd.add(bottomEyeLine);
    cmd.add(photoUnits);

    // Print definition arguments:
    TCLAP::ValueArg<double> printWidth("", "printWidth", "Print definition: width", false, 2.0, dimensionTypeDescription);
    TCLAP::ValueArg<double> printHeight("",
                                        "printHeight",
                                        "Print definition: height",
                                        false,
                                        2.0,
                                        dimensionTypeDescription);
    TCLAP::ValueArg<std::string> printUnits("",
                                            "printUnits",
                                            "Print definition: size dimension units",
                                            false,
                                            "inch",
                                            dimensionTypeDescription);
    TCLAP::ValueArg<double> printResolution("",
                                            "printResolution",
                                            "Print definition: print resolution",
                                            false,
                                            300.0,
                                            "Dots per Inch (DPI)");
    cmd.add(printWidth);
    cmd.add(printHeight);
    cmd.add(printUnits);
    cmd.add(printResolution);

    try
    {
        cmd.parse(argc, argv);
    }
    catch (TCLAP::ArgException & e) // catch any exceptions
    {
        std::cerr << "Error parsing arguments: " << e.error() << " for arg " << e.argId() << std::endl;
        exit(0);
    }

    PppEngine engine;
    configureEngine(configFile.getValue(), engine);

    const auto imgKey = setImage(inputImage.getValue(), engine);

    LandMarks landmarks;
    engine.detectLandMarks(imgKey, landmarks);

    PhotoStandard ps(photoWidth.getValue(),
                     photoHeight.getValue(),
                     faceHeight.getValue(),
                     bottomEyeLine.getValue(),
                     photoUnits.getValue());

    CanvasDefinition cd(printWidth.getValue(),
                        printHeight.getValue(),
                        printResolution.getValue(),
                        printUnits.getValue());

    const auto output = engine.createTiledPrint(imgKey, ps, cd, landmarks.crownPoint, landmarks.chinPoint);

    // TODO: Print header and footer

    // Save the image

    vector<int> compressionParams { cv::IMWRITE_PNG_COMPRESSION, 9 };
    imwrite(outputImage.getValue(), output, compressionParams);

    return 0;
}
